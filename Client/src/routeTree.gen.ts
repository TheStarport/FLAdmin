/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SetupRouteImport } from './routes/setup'
import { Route as Plugin_managerRouteImport } from './routes/plugin_manager'
import { Route as LoginRouteImport } from './routes/login'
import { Route as CharactersRouteImport } from './routes/characters'
import { Route as AccountsRouteImport } from './routes/accounts'
import { Route as IndexRouteImport } from './routes/index'

const SetupRoute = SetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const Plugin_managerRoute = Plugin_managerRouteImport.update({
  id: '/plugin_manager',
  path: '/plugin_manager',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersRoute = CharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsRoute = AccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRoute
  '/characters': typeof CharactersRoute
  '/login': typeof LoginRoute
  '/plugin_manager': typeof Plugin_managerRoute
  '/setup': typeof SetupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRoute
  '/characters': typeof CharactersRoute
  '/login': typeof LoginRoute
  '/plugin_manager': typeof Plugin_managerRoute
  '/setup': typeof SetupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRoute
  '/characters': typeof CharactersRoute
  '/login': typeof LoginRoute
  '/plugin_manager': typeof Plugin_managerRoute
  '/setup': typeof SetupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accounts'
    | '/characters'
    | '/login'
    | '/plugin_manager'
    | '/setup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/accounts'
    | '/characters'
    | '/login'
    | '/plugin_manager'
    | '/setup'
  id:
    | '__root__'
    | '/'
    | '/accounts'
    | '/characters'
    | '/login'
    | '/plugin_manager'
    | '/setup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountsRoute: typeof AccountsRoute
  CharactersRoute: typeof CharactersRoute
  LoginRoute: typeof LoginRoute
  Plugin_managerRoute: typeof Plugin_managerRoute
  SetupRoute: typeof SetupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plugin_manager': {
      id: '/plugin_manager'
      path: '/plugin_manager'
      fullPath: '/plugin_manager'
      preLoaderRoute: typeof Plugin_managerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts': {
      id: '/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountsRoute: AccountsRoute,
  CharactersRoute: CharactersRoute,
  LoginRoute: LoginRoute,
  Plugin_managerRoute: Plugin_managerRoute,
  SetupRoute: SetupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
