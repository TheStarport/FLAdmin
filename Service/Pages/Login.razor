@page "/login"
@using Common.Auth;
@using Common.State.ModalInfo;
@attribute [AllowAnonymous]
@inject AuthStateProvider AuthState
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IDispatcher Dispatcher
@inject IPersistentRoleProvider RoleProvider

<div class="rz-p-12 rz-text-align-center" style="display: @(_render ? "inherit" : "none")">
    <div>
        <RadzenFormField Text="Login Token" Variant="Variant.Flat">
            <Start>
                <RadzenIcon Icon="account_circle" />
            </Start>
            <ChildContent>
                <RadzenPassword @bind-Value="@_value" Placeholder="Enter Login Token" />
            </ChildContent>
        </RadzenFormField>
    </div>
    <div class="rz-p-3">
        <RadzenCheckBox @bind-Value="@_rememberMe" Name="RememberMe" />
        <RadzenLabel Text="Remember Me?" Component="RememberMe" Style="color: white" />
    </div>
    <div class="rz-p-3">
        <RadzenButton Click="@(_ => SignIn(false))" Text="Login" Icon="lock_open" ButtonStyle="ButtonStyle.Primary" />
    </div>
</div>

@code
{
    bool _render = false;
    string? _value;
    bool _rememberMe;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
        {
            return;
        }

	    if (RoleProvider.GenerateDefaultAdminUserIfNotExists())
	    {
		    return;
	    }

        _value = await LocalStorage.GetItemAsStringAsync("token");
        if (_value is not null)
        {
            // Attempt to sign in if we already have a valid token
            if(!await SignIn(true))
            {
                // Token was bad, clear it
                await LocalStorage.RemoveItemAsync("token");
            }
            else
            {
                return;
            }
        }

        _render = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> SignIn(bool automatic)
    {
        if (AuthState.Authenticate(_value ?? ""))
        {
            NavigationManager.NavigateTo("/");

            if (_rememberMe)
            {
                await LocalStorage.SetItemAsStringAsync("token", _value);
            }
            
            return true;
        }
        else if (!automatic)
        {
            Dispatcher.Dispatch(new ModalInfoAction($"Invalid login token", true));
        }
        
        return false;
    }
}
